#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""This is a quick script to take a BeerXML file and use it to produce an
HTML version of the recipe that is marked up with the h-recipe microformat.
h-recipe is documented at http://microformats.org/wiki/h-recipe. This script is
primarily intended to avoid duplicating data entry work on my own brewing blog:
http://is.gd/XPBrewing.

This script is copyright 2017-18 by Patrick Mooney. It is licensed under the GNU
GPL, either version 3 or (at your option) any later version. See the file
LICENSE.md for details.

Note that this script is now a Python 3 script, because pyBeerXML now uses
Python 3. Python 2.X is no longer supported.
"""


import argparse

import pybeerxml        # [sudo] pip install [-U] pybeerxml; or see https://github.com/hotzenklotz/pybeerxml

import patrick_logger   # https://github.com/patrick-brian-mooney/python-personal-library/blob/master/patrick_logger.py
from patrick_logger import log_it


force_test = False
patrick_logger.verbosity_level = 3


def convert_to_hrecipe(i_file, o_file):
    """Uses pybeerxml to read the import file, then coughs out an appropriate HTML
    file, marked up with h-recipe. The input (and therefore output) file may
    contain more than one recipe.
    """
    log_it('INFO: Converting %s to %s' % (i_file, o_file), 1)
    parser = pybeerxml.Parser()
    recipes = parser.parse(i_file)
    with open(o_file, mode='w') as output_file:
        output_file.write('<!doctype html>\n<html>\n<head>\n<title>Conversion results for %s</title>\n' % i_file)
        output_file.write('<meta charset="utf-8" />\n</head>\n<body>\n\n' )
        output_file.write('<h1>Conversion results for %s</h1>\n\n' % i_file)
        output_file.write("""<p>This file was generated by <code><a rel="muse" href="https://github.com/patrick-brian-mooney/beerxml-to-hrecipe">Patrick Mooney's beerxml-to-hrecipe</a></code>.</p>""")
        log_it('INFO: HTML header written', 3)
        log_it('INFO: there are %d recipes' % len(recipes), 2)
        for r in recipes:
            # Next, ingredients
            output_file.write('\n\n<h2 id="ingredients">Ingredients</h2>\n\n<ul class="h-recipe">\n')
            log_it('INFO: there are %d fermentables' % len(r.fermentables), 2)
            for f in r.fermentables:
                log_it('INFO: creating line for fermentable %s' % f.name, 3)
                output_file.write('  <li class="p-ingredient">%.2f&nbsp;lb. %s</li>\n' % (2.20462 * f.amount, f.name))
            log_it('INFO: there are %d hops' % len(r.hops), 2)
            for h in r.hops:
                log_it('INFO: creating line for hop %s' % h.name, 3)
                output_file.write('  <li class="p-ingredient">%.2f&nbsp;oz. %s hops (%s%% A.A.) at %.0f min.</li>\n' % (2.20462 * 16 * h.amount, h.name, h.alpha, h.time))
            log_it('INFO: there are %d yeasts' % len(r.yeasts), 2)
            for y in r.yeasts:
                log_it('INFO: creating line for yeast %s' % y.name, 3)
                output_file.write('  <li class="p-ingredient">%s %s</li>\n' % (y.laboratory, y.name))
            output_file.write('</ul>')

        output_file.write('\n\n<h2 id="procedure">Procedure</h2>\n')
        output_file.write('<div class="e-instructions">\n<p>Write-up goes here.</p>\n</div>\n')

        output_file.write('\n<p class="vcalendar"><span class="vevent"><strong class="summary description">Brew day</strong>: <abbr title="" class="dtstart">date</abbr></span><br />\n')
        output_file.write('<strong>Predicted original gravity:</strong> %.4f<br />\n' % r.og)
        output_file.write('<strong>Measured original gravity:</strong> <br />\n')
        output_file.write('<strong>Estimated IBUs:</strong> %.1f<br />\n' % r.ibu)
        output_file.write('<strong>Predicted final gravity</strong> %.4f<br />\n' % r.fg)
        output_file.write('<strong>Predicted ABV:</strong> %.1f<br />\n' % r.abv)

        output_file.write('\n<span class="vevent"><strong class="summary description">Bottling day </strong>: <abbr title="" class="dtstart">date</abbr></span><br />\n')
        output_file.write('<strong>Final gravity:</strong> <br />\n')
        output_file.write('<strong>Estimated ABV:</strong></p>\n')

        output_file.write('\n<p><strong>Yield</strong>:</p>\n')
        output_file.write('<ul>\n<li></li>\n</ul>\n')
        output_file.write('<p><strong>Total yield:</strong></p>\n')
        log_it('INFO: recipe summary information written for recipe "%s"' % r.name, 3)

        log_it('<h2 id="observations">Observations</h2>\n')
        log_it('<ul class="vcalendar xoxo">\n<li></li>\n</ul>')
 
        output_file.write("\n</body>\n</html>")
        log_it('Output file written!')

if __name__ == "__main__":
    if force_test:
        convert_to_hrecipe('/home/patrick/Documents/writing/blogs/XPB/beerXML/098.xml', '/home/patrick/Desktop/something.html')
    else:
        parser = argparse.ArgumentParser(epilog=__doc__)
        parser.add_argument('-i', '--input',  help="specify the input file.", required=True)
        parser.add_argument('-o', '--output', help="specify the output file.", required=True)
        args = vars(parser.parse_args())
        convert_to_hrecipe(args['input'], args['output'])
