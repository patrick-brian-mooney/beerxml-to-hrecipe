#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""This is a quick script to take a BeerXML file and use it to produce an
h-recipe-marked HTML version of the recipe. Primarily intended to avoid
duplicating data entry work on my own brewing blog: http://is.gd/XPBrewing.

This script is copyright 2017 by Patrick Mooney. It is licensed under the GNU
GPL, either version 3 or (at your option) any later version. See the file
LICENSE.md for details.

Note that this uses Python 2.X because pybeerxml currently requires that.
"""


import argparse

import pybeerxml        # [sudo] pip install [-U] pybeerxml; or see https://github.com/hotzenklotz/pybeerxml

import patrick_logger   # https://github.com/patrick-brian-mooney/python-personal-library/blob/master/patrick_logger.py
from patrick_logger import log_it


force_test = True
patrick_logger.verbosity_level = 3


def convert_to_hrecipe(i_file, o_file):
    """Uses pybeerxml to read the import file, then coughs out an appropriate HTML
    file, marked up with h-recipe. The input (and therefore output) file may
    contain more than one recipe.
    """
    log_it('INFO: Converting %s to %s' % (i_file, o_file), 1)
    parser = pybeerxml.Parser()
    recipes = parser.parse(i_file)
    with open(o_file, mode='w') as output_file:
        output_file.write('<!doctype html>\n<html>\n<head>\n<title>Conversion results for %s</title>\n' % i_file)
        output_file.write('</head>\n<body>\n\n' )
        output_file.write('<h1>Conversion results for %s</h1>\n\n' % i_file)
        output_file.write("""<p>This file was generated by <code><a rel="muse" href="https://github.com/patrick-brian-mooney/beerxml-to-hrecipe">Patrick Mooney's beerxml-to-hrecipe</a></code>.</p>""")
        log_it('INFO: HTML header written', 3)
        log_it('INFO: there are %d recipes' % len(recipes), 2)
        for r in recipes:
            # First, some basic recipe parameters
            output_file.write('<h2>%s</h2>\n\n' % r.name)
            output_file.write('<dl>\n<dt>O.G.:</dt> <dd>%.3f</dd>\n' % r.og)
            output_file.write('<dt>F.G.:</dt> <dd>%.3f</dd>\n' % r.fg)
            output_file.write('<dt>IBU:</dt> <dd>%.2f</dd>\n' % r.ibu)
            output_file.write('<dt>ABV.:</dt> <dd>%.2f</dd></dl>\n' % r.abv)
            log_it('INFO: basic recipe information written for recipe "%s"' % r.name, 3)

            # Next, ingredients
            output_file.write('<h3>Ingredients</h3>\n\n<ul>\n')
            log_it('INFO: there are %d fermentables' % len(r.fermentables), 2)
            for f in r.fermentables:
                log_it('INFO: creating line for fermentable %s' % f.name, 3)
                output_file.write('  <li class="p-ingredient">%.2f&nbsp;lb. %s</li>\n' % (2.20462 * f.amount, f.name))
            log_it('INFO: there are %d hops' % len(r.hops), 2)
            for h in r.hops:
                log_it('INFO: creating line for hop %s' % h.name, 3)
                output_file.write('  <li class="p-ingredient">%.2f&nbsp;oz. %s (%s%% A.A.) at %.0f min.</li>\n' % (2.20462 * 16 * h.amount, h.name, h.alpha, h.time))
            log_it('INFO: there are %d yeasts' % len(r.yeasts), 2)
            for y in r.yeasts:
                log_it('INFO: creating line for yeast %s' % y.name, 3)
                output_file.write('  <li class="p-ingredient">%s %s</li>\n' % (y.laboratory, y.name))
            output_file.write('</ul>')
        output_file.write("\n</body>\n</html>")


if __name__ == "__main__":
    if force_test:
        convert_to_hrecipe('/home/patrick/Documents/writing/blogs/XPB/beerXML/064.xml', '/home/patrick/Desktop/something.html')
    else:
        parser = argparse.ArgumentParser(epilog=__doc__)
        parser.add_argument('-i', '--input',  help="specify the input file.", required=True)
        parser.add_argument('-o', '--output', help="specify the output file.", required=True)
        args = vars(parser.parse_args())
        convert_to_hrecipe(args['input'], args['output'])
